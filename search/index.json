[{"content":"","date":"2021-08-14T15:20:24+08:00","image":"http://www.rmdarck18.xyz:1313/p/%E6%AC%A2%E8%BF%8E%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%8D%9A%E5%AE%A2/mmexport1532947875714_hub6984e6ccfaffd1edd3922c5add2ada9_109934_120x120_fill_q75_box_smart1.jpg","permalink":"http://www.rmdarck18.xyz:1313/p/%E6%AC%A2%E8%BF%8E%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%8D%9A%E5%AE%A2/","title":"欢迎访问本博客！"},{"content":"貴方のその美しい顔\n你那张令人移不开眼的小脸啊\n火傷を負った\n如同火灾里遭了殃的\n摩天楼\n摩 天 楼\n","date":"2021-08-13T22:51:36+08:00","permalink":"http://www.rmdarck18.xyz:1313/p/%E6%9F%90%E9%A6%96%E6%AD%8C%E6%AD%8C%E8%AF%8D/","title":"某首歌歌词"},{"content":"此篇文章在于帮助对网络知识非常陌生的用户快速部署起一个轻量级的个人页面，但是因为这种事情多少涉及到一些技术层面的东西，很难说能够畅通无阻的就构建起自己的博客，只能说有问题多思考加邮件留言吧。。\n第一篇主要是讲一些环境准备和需要的软件。\n环境准备 在正式开始上手前，我们需要做一些环境准备，何谓“环境\u0026quot;？\n程序其实就像一种生物，鱼需要水，植物需要阳光，绝大部分动物都需要氧气，除了必备的生存条件之外还可以准备一些辅助的条件让生物更加满足，这些都可以称之为环境。这一部分主要是介绍搭建博客必要的环境，请准备好网络环境以及电脑。\n git（必要，进行代码管理必不可少的工具） Github（必要，这篇教程主要就是借助github代码托管实现个人博客） Shell（Windows平台推荐WindowsTerminal）、 MarkDown编辑器（MarkDown是一种标记语言，写文章会用到） 善于思考的大脑和愿意付出行动的双手   Git的安装 Git简介 git是一个分布式版本控制软件，最初由林纳斯·托瓦兹创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。应注意的是，这与GNU Interactive Tools不同。 git最初的开发动力来自于BitKeeper和Monotone。 维基百科\n上面这堆谜语来自wiki，举例说明吧。\n好比你装一台电脑，整个过程存在非常多的状态，甚至装完之后还需要升级维护之类的需求。如果中间出了问题就要拆掉已经装好的部分回到出错的状态重新来过，非常折磨！现在出现了这么一个工具，它可以记录下一个时空节点的所有信息，比如在你装好CPU，装好内存，装好显卡的每个结束时刻你都可以记录下这一时空节点，还可以带上一些你的辅助信息，说明为啥要记录这个节点以及在这个节点你都做了些什么。这样当你出现了什么问题的时候你可以快速的检查到底出啥问题了，甚至返回到之前的时空节点将其修复！是不是非常酷炫？这还不是最酷的，结合下文会讲到的Github，甚至可以做到让别人克隆你的时空节点记录，将他的时空记录和你的合并起来！真是令人激动。当然，Git的进一步使用就需要各位深入学习了，此处只是为了方便大家理解后面的命令都在做什么。\nGit的下载和安装 官网地址\n\n根据自己系统选择，推荐选择Setup安装程序，下面的是便携版，涉及到环境变量注册表这些，不推荐萌新使用，下载下来后双击运行。保持默认选项一冲到底即可！当然，你也可以选择网络上查询相关资料再做决定。\n安装完成过后你可以在任何一个地方鼠标右键看到这两个选项，这就代表安装完成了。\n\nGithub账号  Github简介 \nGitHub是通过Git进行版本控制的软件源代码托管服务平台，由GitHub公司的开发者Chris Wanstrath、P. J. Hyett和汤姆·普雷斯顿·沃纳使用Ruby on Rails编写而成。 GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开或私有的代码仓库，但付费用户支持更多功能。 维基百科\nwiki对于完全没有基础的人确实有点麻哦，还是举例说明吧。\n比如你是一个画家，你非常喜欢在网络上分享自己的绘画作品，有一天你突然萌生了一个奇妙的想法，假如我可以发布我作品的源文件，让大家一起来完成作品会怎么样？于是你发布了作品的psd或者是其它可以编辑的文件到一个网络上的仓库中，并且告诉所有人可以随意编辑你这个仓库里的作品。现在，其他人就可以下载你的作品，在他们的电脑上完成了工作后再发布到你的作品仓库里，或者单纯下载下来欣赏使用，这是开源的体现。\n网络上建立仓库（存储空间）是需要消耗资源的，github提供给了用户一定的免费资源，大量用户之间则构建起了一个交流的社区，然后把这个例子中的绘画作品换成代码就可以简单理解github以及开源社区是什么了。\n 注册github账号 访问这个链接github.com，来到github官网，找到右上角的Sign up按钮。\n接下来就是github的注册信息界面了，做的很漂亮，如果网络条件不好的话请多等待一下，或者挂上梯子再试试。这部分不予赘述，就是一个注册流程，也没啥限制的。\n完成注册后来到个人的首页。\n 仓库说明 有了账号还需要仓库来存放你的博客，创建仓库也是非常简单的，但是注意个人博客类的仓库命名需要一定规范，这就是唯一需要注意的地方了。点击那个Repositories按钮，然后New\n\n命名规范就是，仓库名一定是你的用户名加上.github.io，这是GitHub解析用户界面的强制要求。其它选项保持默认就可以了，不用管。我这里报红是因为我已经有这个仓库了，各位应该不会有啥问题，建好仓库后先把它撂在这不管，还有一些准备工作要做。\n  Shell的准备 Shell的介绍 什么是Shell呢？计算机在早期的时候是没有这么多花花绿绿的界面让你来用的，所有的操作都是通过shell（终端）来完成的，比如复制一个文件到另一个目录这样简单的操作，就需要在一个黑黑的窗体里完成，各位也许在Windows里接触过这个黑窗体，没错，CMD其实也是一个Shell（终端）。\n那你可能会问，为啥不做一个界面出来呢，不是会方便很多吗？首先是图形化的界面消耗的资源比较高，在服务器上大家早就习惯了一套命令式的交互，没有必要去做一套费力又不咋讨好的图形界面，所以很多软件都是没有图形化界面的，包括系统也是，Linux这类服务器系统大部分都没有做图形化界面的，当然你可以自己安装图形界面。再者就是对于熟练的程序员来说使用命令交互比图形界面快多了，等待图形界面加载的时候就已经使用节约数十倍的资源占用的终端完成操作了。\n 为什么要安装WindowsTerminal Windows的CMD不够用，丑（\n 下载以及安装 有两种方式，最简单的，在开始菜单里打开你的Windows应用商店，搜索WindowsTerminal安装即可\n\n或者你可以来到这个仓库的发行地址下载WindowsTerminal，翻到页面底部，下载第一个文件，下载下来直接双击即可，这个我记得是UWP应用形式的。\n\n完成安装过后可以按下Win+R打开运行窗口，输入wt回车即可打开Shell\n\n\n也可以通过点击右键菜单里的WindowsTerminal选项在右键所点击的目录打开Shell\n","date":"2021-08-13T20:38:35+08:00","image":"http://www.rmdarck18.xyz:1313/p/personal_blog/head_hu0d41abcf2798df58867175abdd80ed1c_1163462_120x120_fill_q75_box_smart1.jpg","permalink":"http://www.rmdarck18.xyz:1313/p/personal_blog/","title":"借助github以及hugo搭建静态的个人博客-0"},{"content":"还没写哦\n","date":"2021-08-13T20:38:35+08:00","image":"http://www.rmdarck18.xyz:1313/p/%E5%80%9F%E5%8A%A9github%E4%BB%A5%E5%8F%8Ahugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/img1_hu1883fd1680917f568a2e51295147733c_936413_120x120_fill_box_smart1_3.png","permalink":"http://www.rmdarck18.xyz:1313/p/%E5%80%9F%E5%8A%A9github%E4%BB%A5%E5%8F%8Ahugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/","title":"借助github以及hugo搭建静态的个人博客-1"},{"content":"一点学习心得\n","date":"2021-08-13T16:05:42+08:00","permalink":"http://www.rmdarck18.xyz:1313/p/study/","title":"Study"},{"content":"简介 基于Java jdk11，SpringBoot，MySQL实现的轻量API应用，主要是配合go-cqhttp的接口标准实现QQ群聊机器人\n快速部署 本地开发 MyLouiseAPI部分 首先是准备开发环境，目前需要的运行环境有JDK11和MySQL8，在本地环境上安装好即可，在application.yml中配置相关的数据源以及数据源连接信息，这里推荐对配置文件进行加密。需要注意的是，这个项目是配合cqhttp一起使用的，是作为服务的API应用，因此还会有一些关于cqhttp的事项。\n在application.yml文件中 server:#服务器端口port:spring:#配置数据源datasource:driver-class-name:com.mysql.cj.jdbc.Driverurl:username:password:#配置MybatisPlusmybatis-plus:configuration:#关闭表字段下划线自动转驼峰导致实体类字段无法匹配map-underscore-to-camel-case:falsemapper-locations:classpath*:xmlglobal-config:db-config:#表名前缀table-prefix:t_Spring-Boot的标准配置，要说明的是Mybatis-Plus，为了简化和数据库的交互使用了Mybatis-Plus，具体的使用方法见官方文档，这里说一下这几条配置的原因\n#关闭表字段下划线自动转驼峰导致实体类字段无法匹配map-underscore-to-camel-case:false假如你在数据库中的一张表内存在以下划线分割的字段，MybatisPlus会自动将查询结果字段以驼峰命名法去匹配你的实体类，如\n 字段名: user_createtime 匹配的实体类名: userCreatetime\n #表名前缀table-prefix:t_MybatisPlus有一个BaseMapper接口，你可以将你写的Mapper继承自这个接口，这个接口会根据你传入的实体类作为泛型实现很多自动化的CURD操作，但是自动拼装的SQL语句中默认是以实体类来命名的，如\n 实体类名: User 自动生成的SQL语句: SELECT * FROM user\n 加上此条配置即可在自动生成的表名前加上前缀。\n当然，具体的实现细节还有个人偏好就需要各位自行查看官方文档了。\n在LouiseConfig.properties文件中 #Louise运行时加载一些默认配置#go-cqhttp监听地址BASE_BOT_URL = cqhttp运行的URL以及端口号，在介绍cqhttp的部分会提到#go-cqhttp上报密钥HTTP_POST_KEY = 在介绍cqhttp的部分会提到#Louise的一些报错信息LOUISE.unknown_command = 没有听懂诶，如果需要帮助的话请说!helpLOUISE.thirdApi_request_failed = 露易兹请求第三方API失败了！#SourceNAO API相关SOURCENAO_API = https://saucenao.com/search.phpSOURCENAO_API_KEY = 修改为你的SOURCENAO_APISourceNAO是实现以图搜图的一个第三方API，因此想要实现搜图功能的话这条配置必不可少，当然，你也可以去选择其它的公共API调用，具体方法可以参考源码。\n此项相关的配置项需要你自己去SourceNAO网站获取，流程简单，只需要注册即可获取到API，具体的请求响应参数可以阅读官方API帮助或者参考我写的代码（丑\n注册：https://saucenao.com/user.php\nAPI Key：https://saucenao.com/user.php?page=search-api\nGO-CQHTTP部分 注意，请先注册一个QQ账号，配置文件中会用到\n基于 Mirai 以及 MiraiGo 的 OneBot Golang 原生实现\n项目地址 https://github.com/Mrs4s/go-cqhttp\n官方文档 https://docs.go-cqhttp.org/\n关于怎么部署这个项目官方文档写的非常清楚了，简单启动非常简单，我这里说一下配置文件和事件过滤器的相关事项。\n配置文件 其实官方提供的默认配置文件的注释说明了很多信息，但是有一些地方还是直观解释一下比较好。现在假设你已经跟着官方的快速开始完成bot的启动了，在bot的根目录下打开config.yml文件。\naccount:# 账号相关#这部分没啥好说的，官方config说明足够详细，就是encrypt最好保持falseheartbeat:# disabled: false # 是否开启心跳事件上报# 心跳频率, 单位秒# -1 为关闭心跳interval:5#推荐可以延长一点心跳的间隔时间 10s - 15s 都可以，最好别关message:# 上报数据类型# 可选: string,array# 推荐选择string吧，API应用也可以直接解析成JSONObject对象（需要GSON依赖）（主要是我没试过array）post-format:string# 是否忽略无效的CQ码, 如果为假将原样发送# CQ码实现建议看文档关于CQ码的介绍，可以理解成一种将你的信息解析成QQ可以理解的格式，或者直接指定一些QQ # 的功能，举个栗子，发送请求JSON参数{\u0026#34;reply\u0026#34;:\u0026#34;[CQ:image, file=\u0026#34;url\u0026#34;]\u0026#34;}就可以在QQ里发送这个URL指 # 定的图片了，如果发送图片失败则会直接显示CQ码原文ignore-invalid-cqcode:false# 默认中间件锚点default-middlewares:\u0026amp;default# 访问密钥, 强烈推荐在公网的服务器设置access-token:\u0026#39;\u0026#39;# 事件过滤器文件目录# 编写默认上报信息的过滤器，满足条件的消息才会上报到API应用filter:\u0026#39;\u0026#39;servers: # HTTP 通信设置 - http:\t# 在API应用的application.yml中就需要填上这里的配置 # 服务端监听地址 host: 127.0.0.1 # 服务端监听端口 port: 5700 # 反向HTTP超时时间, 单位秒 # 最小值为5，小于5将会忽略本项设置 # 可以适当调高，如果API应用调用第三方接口耗时较长可能会导致bot一直无法成功请求服务 timeout: 5 middlewares: \u0026lt;\u0026lt;: *default # 引用默认中间件 # 反向HTTP POST地址列表 # 这个就是说你的API应用监听的地址和端口，也就是bot接收到的消息或者是事件会上报给这个地方 # secret是bot的上报请求会带上一些加密的请求头参数，API应用可以根据这个来判断请求是否来自bot # 具体算法见官方文档 post: url: \u0026#39;\u0026#39; # 地址 secret:\u0026#39;\u0026#39;# 密钥过滤器 官方也有文档介绍过滤器如何配置，还有具体规则，这里还是举例说明\n bot的目录结构 这是我自己的根据自己偏好更改\n.├── go-cqhttp├── config.yml (旧版: config.hjson)├── device.json├── filter\t└── filters.json├── logs│ └── xx-xx-xx.log└── data ├── images │ └── xxxx.image └── db # config.yml# 默认中间件锚点default-middlewares: \u0026amp;default# 事件过滤器文件目录# 编写默认上报信息的过滤器，满足条件的消息才会上报到API应用filter: \u0026#39;filter/filters.json\u0026#39;// filter.json// 规则含义 允许上报以半角!开头或者meta_event_type为心跳检测的消息{ \u0026#34;.or\u0026#34; : [ { \u0026#34;raw_message\u0026#34;: { \u0026#34;.regex\u0026#34;: \u0026#34;^!\u0026#34; } }, { \u0026#34;meta_event_type\u0026#34;: \u0026#34;heartbeat\u0026#34; } ]}  开发进度   监听群聊信息\n  发送随机图片\n  2021年8月6日14:51:39 返回结果的简单封装\n2021年8月7日22:04:49  实现用户注册，未注册情况下不能调用功能 返回简单的帮助信息图片 初步接收上传文件上报的接口 加入MySQL ","date":"2021-08-13T15:23:00+08:00","permalink":"http://www.rmdarck18.xyz:1313/p/mylouiseproject-api%E5%BA%94%E7%94%A8/","title":"MyLouiseProject API应用"}]